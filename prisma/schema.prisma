datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  CONSUMER
  PROVIDER
  ADMIN
}
enum ServiceType {
  TIFFIN
  DINEIN
  BOTH
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  password      String?
  isFirstLogin  Boolean   @default(true)
  role          UserRole?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Authenticator Authenticator[]
  accounts      Account[]
  sessions      Session[]

  consumer Consumer?
  provider Provider?

  @@map("users")
}

model Consumer {
  userId        String         @id @db.Uuid
  address       String
  preferences   Json?
  user          User           @relation(fields: [userId], references: [id])
  subscriptions Subscription[]
  feedback      Feedback[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("consumers")
}

model Provider {
  userId          String         @id @db.Uuid
  businessName    String
  kitchenLocation String
  address         String
  city            String
  state           String
  postalCode      String
  country         String
  latitude        Float?
  longitude       Float?
  serviceType     ServiceType?
  user            User           @relation(fields: [userId], references: [id])
  channels        Channel[]
  subscriptions   Subscription[]
  feedback        Feedback[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("providers")
}
enum MenuType {
  BREAKFAST
  LUNCH
  DINNER
}

model Channel {
  id               String         @id @default(uuid()) @db.Uuid
  name             String
  image            String
  rating           Float
  totalSubscribers Int

  providerId       String         @db.Uuid
  provider         Provider       @relation(fields: [providerId], references: [userId])

  dailyMenus       DailyMenu[]

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model DailyMenu {
  id         String           @id @default(uuid()) @db.Uuid
  date       DateTime
  channelId  String           @db.Uuid
  channel    Channel          @relation(fields: [channelId], references: [id])
  menus      MenuAssignment[]

  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model MenuAssignment {
  id          String      @id @default(uuid()) @db.Uuid
  menuType    MenuType

  dishId      String      @db.Uuid
  dish        Dish        @relation(fields: [dishId], references: [id])

  dailyMenuId String      @db.Uuid
  dailyMenu   DailyMenu   @relation(fields: [dailyMenuId], references: [id])

  @@unique([dishId, dailyMenuId, menuType])
}

model Dish {
  id            String            @id @default(uuid()) @db.Uuid
  name          String
  assignments   MenuAssignment[]
  ingredients   DishIngredient[]

  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Ingredient {
  id       String            @id @default(uuid()) @db.Uuid
  name     String            @unique
  dishes   DishIngredient[]

  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model DishIngredient {
  id            String       @id @default(uuid()) @db.Uuid
  dishId        String       @db.Uuid
  dish          Dish         @relation(fields: [dishId], references: [id])

  ingredientId  String       @db.Uuid
  ingredient    Ingredient   @relation(fields: [ingredientId], references: [id])

  @@unique([dishId, ingredientId])
}


model Subscription {
  id         String             @id @default(uuid()) @db.Uuid
  consumerId String             @db.Uuid
  providerId String             @db.Uuid
  startDate  DateTime
  endDate    DateTime
  plan       String
  status     SubscriptionStatus
  consumer   Consumer           @relation(fields: [consumerId], references: [userId], onDelete: Cascade)
  provider   Provider           @relation(fields: [providerId], references: [userId], onDelete: Cascade)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  @@index([consumerId])
  @@index([providerId])
  @@map("subscriptions")
}


model Feedback {
  id         String   @id @default(uuid()) @db.Uuid
  consumerId String   @db.Uuid
  providerId String   @db.Uuid
  rating     Int
  comments   String?
  consumer   Consumer @relation(fields: [consumerId], references: [userId], onDelete: Cascade)
  provider   Provider @relation(fields: [providerId], references: [userId], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("feedback")
}


enum AccountType {
  oauth       
  credentials 
}


model Account {
 id                String      @id @default(uuid()) @db.Uuid
 userId            String      @db.Uuid
 type              AccountType @default(oauth)
 provider          String?
 providerAccountId String?
 refresh_token     String?  @db.Text
 access_token      String?  @db.Text
 expires_at        Int?
 token_type        String?
 scope             String?
 id_token          String?  @db.Text
 session_state     String?
 createdAt         DateTime @default(now())
 updatedAt         DateTime @updatedAt
 user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@unique([provider, providerAccountId])
 @@map("accounts")
}

model Session {
  sessionToken String   @unique 
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model VerificationToken {
  identifier String @unique 
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique @db.VarChar(255)
  userId               String  @db.Uuid
  providerAccountId    String
  credentialPublicKey  String  @db.VarChar(255)
  counter              Int
  credentialDeviceType String  @db.VarChar(255)
  credentialBackedUp   Boolean
  transports           String? @db.VarChar(255) 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
