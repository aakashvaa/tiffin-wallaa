datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  CUSTOMER
  PROVIDER
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String
  email         String    @unique
  emailVerified DateTime?
  phone         String?
  password      String
  role          UserRole  @default(CUSTOMER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Authenticator Authenticator[]
  accounts      Account[]
  sessions      Session[]

  customer Customer?
  provider Provider?

  @@map("users")
}

model Customer {
  userId        String         @id @db.Uuid
  address       String
  preferences   Json?
  user          User           @relation(fields: [userId], references: [id])
  subscriptions Subscription[]
  feedback      Feedback[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("customers")
}

model Provider {
  userId          String         @id @db.Uuid
  businessName    String
  kitchenLocation String
  address         String
  city            String
  state           String
  postalCode      String
  country         String
  latitude        Float?
  longitude       Float?
  user            User           @relation(fields: [userId], references: [id])
  subscriptions   Subscription[]
  feedback        Feedback[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("providers")
}

model Subscription {
  id         String             @id @default(uuid()) @db.Uuid
  customerId String             @db.Uuid
  providerId String             @db.Uuid
  startDate  DateTime
  endDate    DateTime
  plan       String
  status     SubscriptionStatus
  customer   Customer           @relation(fields: [customerId], references: [userId], onDelete: Cascade)
  provider   Provider           @relation(fields: [providerId], references: [userId], onDelete: Cascade)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  @@index([customerId])
  @@index([providerId])
  @@map("subscriptions")
}

model Feedback {
  id         String   @id @default(uuid()) @db.Uuid
  customerId String   @db.Uuid
  providerId String   @db.Uuid
  rating     Int
  comments   String?
  customer   Customer @relation(fields: [customerId], references: [userId])
  provider   Provider @relation(fields: [providerId], references: [userId])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("feedback")
}

enum AccountType {
  OAUTH
  CREDENTIALS
}

model Account {
  userId                String      @db.Uuid
  type                  AccountType
  providerAuth          String
  providerAuthAccountId String
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([providerAuth, userId, providerAuthAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String  @db.Uuid
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
